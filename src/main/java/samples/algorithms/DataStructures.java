package samples.algorithms;

import java.util.*;

/**
 * Example with different data structures.
 */
public class DataStructures {

	public static void main(String[] args) {

		Person p1 = new Person("peter", 20, true);
		Person p2 = new Person("peter", 20, false);
		Person p3 = p1;
		Person p4 = new Person("mary", 20, false);

		System.out.println("p1 == p2: " + (p1 == p2));
		System.out.println("p1 == p3: " + (p1 == p3));
		System.out.println("p1 == p4: " + (p1 == p4));
		System.out.println("p1.equals(p2): " + p1.equals(p2));
		System.out.println("p1.equals(p3): " + p1.equals(p3));
		System.out.println("p1.equals(p4): " + p1.equals(p4));

		System.out.println("p1.hashCode(): " + p1.hashCode());
		System.out.println("p2.hashCode(): " + p2.hashCode());
		System.out.println("p3.hashCode(): " + p3.hashCode());
		System.out.println("p4.hashCode(): " + p4.hashCode());

		Map<Person, Integer> people = new HashMap<>();
		people.put(p1, 7);
		Integer note = people.get(p2); // hashCode/equals return the same
		System.out.println("Number for " + p1.name + ": " + note);

		List<Person> list = Arrays.asList(
			new Person("peter", 20, true),
			new Person("mary", 30, true),
			new Person("john", 20, true)
		);

		// Comparator to sort Person objects
		Comparator<Person> comparator = (a, b) -> {
			if (a.age == b.age) {
				return a.name.compareTo(b.name);
			} else {
				return a.age - b.age;
			}
		};

		// Sort adding elements to a TreeSet, using a comparator
		Set<Person> set = new TreeSet<>(comparator);
		set.addAll(list);

		// Sort in the list, using the same comparator
		Collections.sort(list, comparator);

		// Alternatively, we could write: class Person extends Comparable<Person>
		// instead of passing the comparator to TreeSet or Collections.sort()

		System.out.println("Sorted people: " + set);
		System.out.println("Sorted people: " + list);
	}

	static class Person {

		public String name;
		public int age;
		public boolean checked;

		public Person(String name, int age, boolean checked) {
			this.name = name;
			this.age = age;
			this.checked = checked;
		}

		// consider implementing equals() and hashCode() when using your class in collections
		// Especially: for using HashSet or HashMap (as keys)
		// for looking for or removing objects in lists or sets

		// Autogenerated by IDEA

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			Person person = (Person) o;
			return age == person.age &&
				Objects.equals(name, person.name);
		}

		@Override
		public int hashCode() {
			return Objects.hash(name, age);
		}

		@Override
		public String toString() {
			return name + " (" + age + ")";
		}
	}

	private void collectionSamples() {

		List<Integer> list1 = new ArrayList<>();
		// add(x) --> O(1)
		// get(i) --> O(1)
		// remove(i) --> O(n)
		// remove(v) --> O(n)
		// remove via Iterator --> O(n)

		List<String> list2 = new LinkedList<>();
		// add(x) --> O(1)
		// get(i) --> O(n)
		// remove(i) --> O(n)
		// remove(v) --> O(n)
		// remove via Iterator --> O(1)

		Set<Date> set1 = new HashSet<>();
		// add(x) --> O(1)
		// get(i)      not available
		// remove(i)   not available
		// remove(v)           --> O(1)
		// remove via Iterator --> O(1)

		Set<Date> set2 = new TreeSet<>();
		// add(x) --> O(log n)
		// get(i)      not available
		// remove(i)   not available
		// remove(v)           --> O(log n)
		// remove via Iterator --> O(log n)

		Map<String, Double> map1 = new HashMap<>();
		// put(k, v) --> O(1)
		// get(k)    --> O(1)
		// remove(k) --> O(1)
		// remove via Iterator --> O(1)


		List<Integer> numbers = new ArrayList<>( Arrays.asList(1, 3, 4, 2, 5) );
		Collections.sort(numbers);

		Iterator<Integer> iterator = numbers.iterator();
		while (iterator.hasNext()) {
			Integer x = iterator.next();
			System.out.println(x);

			if (x % 2 == 0) {
				iterator.remove(); // useful for example with LinkedList
			}
		}

		// The enhanced for can be used with Iterable
		// numbers is an Iterable
		for (int x : numbers) {
			System.out.println(x);
		}
	}
}
